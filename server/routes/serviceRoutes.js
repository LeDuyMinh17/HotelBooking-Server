import express from "express";
import Service from "../models/service.js";
import User from "../models/user.js";
import authToken from "../middleware/authMiddleware.js";
import Invoice from "../models/invoice.js";

const serviceRouter = express.Router();

// Th√™m d·ªãch v·ª•
serviceRouter.post("/them-dich-vu", authToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user || user.role !== "admin") {
      return res.status(403).json({ message: "B·∫°n kh√¥ng ƒë·ªß quy·ªÅn" });
    }

    const { images, name, price, descShort, descLong } = req.body; // ‚úÖ ƒë·ªïi img -> images

    if (!name || !price || !descShort || !descLong) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin d·ªãch v·ª•" });
    }
    if (isNaN(price) || price <= 0) {
      return res.status(400).json({ message: "Gi√° d·ªãch v·ª• kh√¥ng h·ª£p l·ªá" });
    }

    const newService = new Service({
      images: Array.isArray(images) ? images : [images], // ‚úÖ ƒë·ªïi img -> images
      name,
      price,
      descShort,
      descLong,
    });

    await newService.save();
    return res.status(201).json({ message: "Th√™m d·ªãch v·ª• th√†nh c√¥ng", service: newService });
  } catch (error) {
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});


//X√≥a d·ªãch v·ª•
serviceRouter.delete("/xoa-dich-vu/:id", authToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user || user.role !== "admin") {
      return res.status(403).json({ message: "B·∫°n kh√¥ng ƒë·ªß quy·ªÅn" });
    }

    const deleted = await Service.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•" });
    }

    res.status(200).json({ message: "X√≥a d·ªãch v·ª• th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});


//S·ª≠a d·ªãch v·ª•
serviceRouter.put("/sua-dich-vu/:id", authToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user || user.role !== "admin") {
      return res.status(403).json({ message: "B·∫°n kh√¥ng ƒë·ªß quy·ªÅn" });
    }

  const { images, name, price, descShort, descLong, isAvailable } = req.body; // ‚úÖ ƒë·ªïi img -> images

  const updated = await Service.findByIdAndUpdate(
    req.params.id,
    {
      ...(images && { images: Array.isArray(images) ? images : [images] }), // ‚úÖ
      ...(name && { name }),
      ...(price && { price: Number(price) }),
      ...(descShort && { descShort }),
      ...(descLong && { descLong }),
      ...(typeof isAvailable === "boolean" && { isAvailable }),
    },
    { new: true, runValidators: true }
  );

    if (!updated) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•" });
    }

    res.status(200).json({ message: "C·∫≠p nh·∫≠t d·ªãch v·ª• th√†nh c√¥ng", service: updated });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});


 //L·∫•y to√†n b·ªô d·ªãch v·ª•
serviceRouter.get("/toan-bo-dich-vu", async (req, res) => {
  try {
    const services = await Service.find().sort({ createdAt: 1 });
    res.status(200).json({ services });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});


//L·∫•y chi ti·∫øt d·ªãch v·ª• theo id
serviceRouter.get("/chi-tiet-dich-vu/:id", async (req, res) => {
  try {
    const service = await Service.findById(req.params.id);
    if (!service) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•" });
    }
    res.status(200).json({ service });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});


// üß© API: L·∫•y top 4 d·ªãch v·ª• ƒë∆∞·ª£c ƒë·∫∑t nhi·ªÅu nh·∫•t (ho·∫∑c gi√° cao nh·∫•t n·∫øu ch∆∞a c√≥ l∆∞·ª£t ƒë·∫∑t
serviceRouter.get("/top-dich-vu", async (req, res) => {
  try {
    const bookings = await Invoice.aggregate([
      { $unwind: "$services" },
      { $group: { _id: "$services.serviceId", count: { $sum: 1 } } },
    ]);
    const countMap = new Map(bookings.map(b => [String(b._id), b.count]));

    // ‚úÖ L·∫•y t·∫•t c·∫£ d·ªãch v·ª• kh·∫£ d·ª•ng
    const services = await Service.find(
      { isAvailable: true },
      "name descShort price images"
    );

    const enriched = services.map(s => ({
      ...s.toObject(),
      price: Number(s.price) || 0,
      bookedCount: countMap.get(String(s._id)) || 0,
    }));

    const booked = enriched.filter(s => s.bookedCount > 0);
    const unbooked = enriched.filter(s => s.bookedCount === 0);

    // ‚úÖ Sort
    booked.sort((a, b) =>
      b.bookedCount !== a.bookedCount ? b.bookedCount - a.bookedCount : b.price - a.price
    );
    unbooked.sort((a, b) => b.price - a.price);

    // ‚úÖ Ch·ªâ t·ªëi ƒëa 3 d·ªãch v·ª•
    let result = [];
    if (booked.length >= 3) {
      result = booked.slice(0, 3);
    } else if (booked.length > 0) {
      result = [
        ...booked,
        ...unbooked.slice(0, 3 - booked.length),
      ];
    } else {
      result = unbooked.slice(0, 3);
    }

    return res.status(200).json({
      message: "L·∫•y top d·ªãch v·ª• th√†nh c√¥ng",
      services: result,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y top d·ªãch v·ª•:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});



export default serviceRouter;
