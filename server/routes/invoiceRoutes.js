import express from "express";
import Invoice from "../models/invoice.js";
import Room from "../models/room.js";
import Service from "../models/service.js";
import Customer from "../models/customer.js";
import authToken from "../middleware/authMiddleware.js";

const invoiceRouter = express.Router();

// üßæ T·∫°o h√≥a ƒë∆°n
invoiceRouter.post("/tao-hoa-don", authToken, async (req, res) => {
  try {
    const { name, phone, email, note, roomId, checkIn, checkOut, services = [] } = req.body;

    if (!name || !email || !phone || !checkIn)
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc." });

    // üß† User ƒëƒÉng nh·∫≠p
    const { id: userId, role } = req.user;
    const userName = req.user.name?.trim() || "Ng∆∞·ªùi d√πng";

    // üîç T√¨m ho·∫∑c t·∫°o kh√°ch h√†ng m·ªõi (ch·ªâ khi tr√πng c·∫£ 3)
    let customer = await Customer.findOne({
      name: name.trim(),
      phone: phone.trim(),
      email: email.trim(),
    });

    if (!customer) {
      customer = new Customer({
        name: name.trim(),
        phone: phone.trim(),
        email: email.trim(),
      });
      await customer.save();
    }

    // ‚úÖ Ki·ªÉm tra ph√≤ng
    const room = await Room.findById(roomId);
    if (!room) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ph√≤ng." });
    if (!room.isAvailable) return res.status(400).json({ message: "Ph√≤ng n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t." });

    // ‚úÖ T√≠nh ti·ªÅn ph√≤ng
    let roomCharge = room.price;
    if (checkOut) {
      const start = new Date(checkIn);
      const end = new Date(checkOut);
      const diff = Math.max(0, end - start);
      const days = Math.max(1, Math.ceil(diff / 86400000));
      roomCharge = room.price * days;
    }

    // ‚úÖ T·∫°o h√≥a ƒë∆°n (note l∆∞u ·ªü ƒë√¢y)
    const invoice = new Invoice({
      customerId: customer._id,
      createdBy: userId,
      roomId,
      checkIn,
      checkOut: checkOut || null,
      bookedBy: userName,
      note: note?.trim() || "",
      services,
      roomCharge,
      serviceCharge: 0,
      totalAmount: roomCharge,
      status: role === "user" ? "Ch·ªù x√°c nh·∫≠n" : "Ch·ªù thanh to√°n",
    });

    await invoice.save();

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng
    room.isAvailable = false;
    await room.save();

    // Sau khi save invoice th√†nh c√¥ng
    const io = req.app.get("io");
    io.emit("newBooking", {
      customer: name,
      room: room.numberRoom,
      time: new Date(),
    });

    res.status(201).json({
      message: "T·∫°o ho√° ƒë∆°n th√†nh c√¥ng",
      invoice,
      customer,
    });
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o ho√° ƒë∆°n:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

//Xem ho√° ƒë∆°n
invoiceRouter.get("/xem-hoa-don", authToken, async (req, res) => {
  try {
    const { id: userId } = req.user;

    const invoices = await Invoice.find({ createdBy: userId })
      .populate("roomId", "numberRoom roomType bedType price")
      .populate("services.serviceId", "name price")
      .populate("customerId", "name phone email")
      .sort({ createdAt: -1 });

    if (!invoices.length) {
      return res.status(200).json({ message: "Ch∆∞a c√≥ ho√° ƒë∆°n n√†o.", invoices: [] });
    }

    return res.status(200).json({
      message: "L·∫•y danh s√°ch ho√° ƒë∆°n th√†nh c√¥ng",
      invoices,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y ho√° ƒë∆°n theo user:", error);
    return res.status(500).json({
      message: "L·ªói server khi l·∫•y danh s√°ch ho√° ƒë∆°n.",
      error: error.message,
    });
  }
});

// üßæ L·∫•y chi ti·∫øt ho√° ƒë∆°n
invoiceRouter.get("/chi-tiet-hoa-don/:id", authToken, async (req, res) => {
  try {
    const { id } = req.params;

    const invoice = await Invoice.findById(id)
      .populate({
        path: "customerId",
        select: "name email phone userId",
      })
      .populate("roomId", "numberRoom roomType bedType price")
      .populate("services.serviceId", "name price")
      .populate("paidBy", "name email"); // ‚úÖ th√™m d√≤ng n√†y

    if (!invoice)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ho√° ƒë∆°n" });

    return res.status(200).json({
      message: "L·∫•y chi ti·∫øt ho√° ƒë∆°n th√†nh c√¥ng",
      invoice,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt ho√° ƒë∆°n:", error);
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

// üßæ Th√™m d·ªãch v·ª• v√†o h√≥a ƒë∆°n
invoiceRouter.post("/them-dich-vu-vao-hoa-don", authToken, async (req, res) => {
  try {
    const { invoiceId, serviceId, quantity, startDate, endDate } = req.body;
    if (!invoiceId || !serviceId || !startDate)
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt." });

    const invoice = await Invoice.findById(invoiceId);
    if (!invoice) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ho√° ƒë∆°n." });

    const service = await Service.findById(serviceId);
    if (!service) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•." });
    if (!service.isAvailable)
      return res.status(400).json({ message: "D·ªãch v·ª• n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng." });

    // üîê Ki·ªÉm tra quy·ªÅn
    const isOwner = invoice.createdBy.toString() === req.user.id;
    const isStaff = ["employee", "admin"].includes(req.user.role);
    if (!isOwner && !isStaff)
      return res.status(403).json({ message: "B·∫°n kh√¥ng th·ªÉ ch·ªânh s·ª≠a ho√° ƒë∆°n n√†y." });

    const start = new Date(startDate);
    const end = endDate ? new Date(endDate) : start;

    // ‚úÖ Ki·ªÉm tra tr√πng d·ªãch v·ª•
    const existing = invoice.services.find(
      (s) =>
        s.serviceId.toString() === serviceId &&
        new Date(s.startDate).toDateString() === start.toDateString() &&
        ((s.endDate && endDate && new Date(s.endDate).toDateString() === new Date(endDate).toDateString()) ||
          (!s.endDate && !endDate))
    );

    if (existing) existing.quantity += quantity;
    else
      invoice.services.push({
        serviceId,
        quantity,
        startDate,
        endDate: endDate || null,
      });

    // ‚úÖ C·∫≠p nh·∫≠t ti·ªÅn
    await invoice.populate("services.serviceId", "price");
    invoice.serviceCharge = invoice.services.reduce((sum, s) => {
      const price = s.serviceId.price;
      const q = s.quantity;
      const sStart = new Date(s.startDate);
      const sEnd = s.endDate ? new Date(s.endDate) : sStart;
      const days = Math.max(1, Math.ceil((sEnd - sStart) / 86400000));
      return sum + price * q * days;
    }, 0);
    invoice.totalAmount = invoice.roomCharge + invoice.serviceCharge;

    await invoice.save();

    return res.status(200).json({
      message: existing ? "ƒê√£ c·∫≠p nh·∫≠t d·ªãch v·ª•" : "ƒê√£ th√™m d·ªãch v·ª•",
      invoice,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi th√™m d·ªãch v·ª•:", error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
});

// üßæ L·∫•y to√†n b·ªô ho√° ƒë∆°n (ch·ªâ d√†nh cho nh√¢n vi√™n)
invoiceRouter.get("/toan-bo-hoa-don", authToken, async (req, res) => {
  try {
    // ‚úÖ Ch·ªâ cho ph√©p role = staff ho·∫∑c admin
    if (req.user.role !== "employee" && req.user.role !== "admin") {
      return res.status(403).json({ message: "Ch·ªâ nh√¢n vi√™n m·ªõi c√≥ quy·ªÅn truy c·∫≠p." });
    }

    // ‚úÖ L·∫•y to√†n b·ªô ho√° ƒë∆°n, k√®m th√¥ng tin kh√°ch v√† ph√≤ng
    const invoices = await Invoice.find()
      .populate("customerId", "name phone email")
      .populate("roomId", "numberRoom roomType bedType price")
      .populate("services.serviceId", "name price")
      .populate("paidBy", "name email role")
      .populate("createdBy", "name email role")
      .sort({ createdAt: -1 });

    if (!invoices || invoices.length === 0) {
      return res.status(200).json({ message: "Hi·ªán ch∆∞a c√≥ ho√° ƒë∆°n n√†o.", invoices: [] });
    }

    return res.status(200).json({
      message: "L·∫•y danh s√°ch to√†n b·ªô ho√° ƒë∆°n th√†nh c√¥ng",
      invoices,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y to√†n b·ªô ho√° ƒë∆°n:", error);
    return res.status(500).json({
      message: "L·ªói server khi l·∫•y to√†n b·ªô ho√° ƒë∆°n.",
      error: error.message,
    });
  }
});

// üßæ C·∫≠p nh·∫≠t tr·∫°ng th√°i ho√° ƒë∆°n (ch·ªâ cho nh√¢n vi√™n ho·∫∑c admin)
invoiceRouter.patch("/hoa-don/:id/trang-thai", authToken, async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    const allowedRoles = ["admin", "employee", "staff"];
    const validStatuses = ["Ch·ªù x√°c nh·∫≠n", "Ch·ªù thanh to√°n", "ƒê√£ thanh to√°n", "ƒê√£ hu·ª∑"];

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (!allowedRoles.includes(req.user.role)) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ho√° ƒë∆°n." });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá." });
    }

    // T√¨m v√† c·∫≠p nh·∫≠t ho√° ƒë∆°n
    const invoice = await Invoice.findByIdAndUpdate(
      id,
      { status },
      { new: true }
    )
      .populate("customerId", "name phone email note")
      .populate("roomId", "numberRoom roomType price");

    if (!invoice)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ho√° ƒë∆°n ƒë·ªÉ c·∫≠p nh·∫≠t." });

    if (invoice.roomId) {
      if (status === "ƒê√£ hu·ª∑") {
        await Room.findByIdAndUpdate(invoice.roomId._id, { isAvailable: true });
      } else if (status === "ƒê√£ thanh to√°n") {
        await Room.findByIdAndUpdate(invoice.roomId._id, { isAvailable: false });
      }
    }
    return res.status(200).json({
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i ho√° ƒë∆°n th√†nh c√¥ng!",
      invoice,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√° ƒë∆°n:", error);
    return res.status(500).json({
      message: "L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√° ƒë∆°n.",
      error: error.message,
    });
  }
});

invoiceRouter.patch("/hoa-don/:id/thanh-toan", authToken, async (req, res) => {
  try {
    const { id } = req.params;
    const today = new Date();

    const invoice = await Invoice.findById(id)
    .populate("roomId", "price isAvailable")
    .populate("services.serviceId", "name price")
    .populate("customerId", "name phone email")
    .populate("paidBy", "name email");

    if (!invoice)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ho√° ƒë∆°n." });

    if (invoice.status === "ƒê√£ hu·ª∑")
      return res.status(400).json({ message: "Ho√° ƒë∆°n n√†y ƒë√£ b·ªã hu·ª∑, kh√¥ng th·ªÉ thanh to√°n." });

  const checkInDate = new Date(invoice.checkIn);

  // N·∫øu h√≥a ƒë∆°n ƒë√£ c√≥ ng√†y tr·∫£ th√¨ d√πng ng√†y ƒë√≥, c√≤n kh√¥ng th√¨ l·∫•y h√¥m nay
  let checkOutDate = invoice.checkOut ? new Date(invoice.checkOut) : new Date(today);
  
  if (!invoice.checkOut) invoice.checkOut = checkOutDate;


  // N·∫øu ch∆∞a c√≥ checkOut v√† ng√†y nh·∫≠n ·ªü t∆∞∆°ng lai ‚Üí b√°o l·ªói
  if (!invoice.checkOut && checkOutDate < checkInDate)
    return res.status(400).json({ message: "Ch∆∞a ƒë·∫øn ng√†y nh·∫≠n ph√≤ng." });


    if (checkOutDate.toDateString() === checkInDate.toDateString())
      checkOutDate.setDate(checkOutDate.getDate());

    // üîπ T√≠nh s·ªë ng√†y ·ªü
    const stayDays = Math.max(1, Math.ceil((checkOutDate - checkInDate) / 86400000));
    const roomPrice = invoice.roomId?.price || 0;
    const roomCharge = roomPrice * stayDays;

    // üîπ T√≠nh ti·ªÅn d·ªãch v·ª•
    let updatedServices = [];
    let serviceCharge = 0;

    if (invoice.services?.length > 0) {
      updatedServices = invoice.services.map((s) => {
        const start = new Date(s.startDate);
        const end = s.endDate ? new Date(s.endDate) : today;

        const days = Math.max(1, Math.ceil((end - start) / 86400000));
        const price = s.serviceId?.price || 0;
        const qty = s.quantity || 1;
        const total = price * qty * days;

        serviceCharge += total;
        return { ...s, endDate: end };
      });
    }

    const totalAmount = roomCharge + serviceCharge;

    // üîπ C·∫≠p nh·∫≠t ho√° ƒë∆°n
    invoice.checkOut = checkOutDate;
    invoice.roomCharge = roomCharge;
    invoice.serviceCharge = serviceCharge;
    invoice.totalAmount = totalAmount;
    invoice.status = "ƒê√£ thanh to√°n";
    invoice.paidAt = new Date();
    invoice.services = updatedServices;
    invoice.paidBy = req.user.id; // ‚úÖ L∆∞u nh√¢n vi√™n th·ª±c hi·ªán thanh to√°n

    await invoice.save();

    // üîπ M·ªü l·∫°i ph√≤ng (an to√†n)
    if (invoice.roomId?._id) {
      await Room.findByIdAndUpdate(invoice.roomId._id, { isAvailable: true });
    }

    return res.status(200).json({
      message: "Thanh to√°n ho√° ƒë∆°n th√†nh c√¥ng!",
      invoice,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi thanh to√°n ho√° ƒë∆°n:", error);
    res.status(500).json({
      message: "L·ªói server khi thanh to√°n ho√° ƒë∆°n.",
      error: error.message,
    });
  }
});

invoiceRouter.patch("/hoa-don/:id/cap-nhat", authToken, async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    const invoice = await Invoice.findByIdAndUpdate(id, updateData, {
      new: true,
    })
      .populate("customerId")
      .populate("roomId")
      .populate("services.serviceId");

    res.status(200).json({
      message: "C·∫≠p nh·∫≠t h√≥a ƒë∆°n th√†nh c√¥ng!",
      invoice,
    });
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ho√° ƒë∆°n:", err);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t ho√° ƒë∆°n." });
  }
});


export default invoiceRouter;


