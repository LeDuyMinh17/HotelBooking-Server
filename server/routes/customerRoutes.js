import express from "express";
import User from "../models/user.js";
import Customer from "../models/customer.js";
import Invoice from "../models/invoice.js";
import authToken from "../middleware/authMiddleware.js";

const customerRouter = express.Router();

/**
 * üìä L·∫•y chi ti·∫øt & th·ªëng k√™ KH theo ID (ID c·ªßa USER ‚Äì ng∆∞·ªùi ƒë·∫∑t)
 * Tr·∫£ v·ªÅ: info user + danh s√°ch invoice (m·ªói invoice ƒë√£ populate customerId l√† ng∆∞·ªùi ƒë∆∞·ª£c ƒë·∫∑t h·ªô)
 */
customerRouter.get("/chi-tiet/:id", authToken, async (req, res) => {
  try {
    const admin = await User.findById(req.user.id);
    if (!admin || admin.role !== "admin") {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p" });
    }

    // user (ng∆∞·ªùi ƒë·∫∑t)
    const customerUser = await User.findById(req.params.id).select("name email phone isActive");
    if (!customerUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // to√†n b·ªô ho√° ƒë∆°n do user n√†y ƒë·∫∑t
    const invoices = await Invoice.find({ createdBy: req.params.id })
      .populate("customerId", "name email phone")
      .populate("roomId", "numberRoom roomType bedType price")
      .sort({ createdAt: -1 });

    const stats = {
      tongHoaDon: invoices.length,
      choXacNhan: invoices.filter((i) => i.status === "Ch·ªù x√°c nh·∫≠n").length,
      choThanhToan: invoices.filter((i) => i.status === "Ch·ªù thanh to√°n").length,
      daThanhToan: invoices.filter((i) => i.status === "ƒê√£ thanh to√°n").length,
      daHuy: invoices.filter((i) => i.status === "ƒê√£ hu·ª∑").length,
    };

    return res.status(200).json({
      message: "L·∫•y chi ti·∫øt kh√°ch h√†ng th√†nh c√¥ng",
      customer: customerUser,  // ng∆∞·ªùi ƒë·∫∑t (User)
      invoices,                // m·ªói ho√° ƒë∆°n ƒë√£ c√≥ customerId (ng∆∞·ªùi ƒë∆∞·ª£c ƒë·∫∑t h·ªô)
      stats,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt kh√°ch h√†ng:", err);
    return res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

/**
 * üîç T√¨m ki·∫øm trong b·∫£ng Customer (ng∆∞·ªùi ƒë∆∞·ª£c ƒë·∫∑t h·ªô)
 * (gi·ªØ nguy√™n n·∫øu b·∫°n c·∫ßn)
 */
customerRouter.get("/tim-kiem", authToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user || user.role !== "admin") {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p" });
    }

    const { keyword } = req.query;
    if (!keyword || keyword.trim() === "") {
      return res.status(400).json({ message: "T·ª´ kho√° t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá" });
    }

    const regex = new RegExp(keyword, "i");
    const results = await Customer.find({
      $or: [{ name: regex }, { email: regex }, { phone: regex }],
    });

    return res.status(200).json({
      message: `T√¨m th·∫•y ${results.length} kh√°ch h√†ng ph√π h·ª£p`,
      results,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t√¨m ki·∫øm kh√°ch h√†ng:", err);
    return res.status(500).json({ message: "L·ªói server", error: err.message });
  }
});

export default customerRouter;
